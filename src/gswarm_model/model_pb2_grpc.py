# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import model_pb2 as model__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in model_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ModelManagerStub(object):
    """Service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/model_manager.ModelManager/Connect',
                request_serializer=model__pb2.NodeRegistration.SerializeToString,
                response_deserializer=model__pb2.ConnectResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/model_manager.ModelManager/Heartbeat',
                request_serializer=model__pb2.Empty.SerializeToString,
                response_deserializer=model__pb2.Empty.FromString,
                _registered_method=True)
        self.Disconnect = channel.unary_unary(
                '/model_manager.ModelManager/Disconnect',
                request_serializer=model__pb2.Empty.SerializeToString,
                response_deserializer=model__pb2.Empty.FromString,
                _registered_method=True)
        self.RegisterModel = channel.unary_unary(
                '/model_manager.ModelManager/RegisterModel',
                request_serializer=model__pb2.ModelInfo.SerializeToString,
                response_deserializer=model__pb2.ModelOperationResponse.FromString,
                _registered_method=True)
        self.ListModels = channel.unary_unary(
                '/model_manager.ModelManager/ListModels',
                request_serializer=model__pb2.Empty.SerializeToString,
                response_deserializer=model__pb2.ModelList.FromString,
                _registered_method=True)
        self.GetModelInfo = channel.unary_unary(
                '/model_manager.ModelManager/GetModelInfo',
                request_serializer=model__pb2.ModelInfo.SerializeToString,
                response_deserializer=model__pb2.ModelInfo.FromString,
                _registered_method=True)
        self.UnregisterModel = channel.unary_unary(
                '/model_manager.ModelManager/UnregisterModel',
                request_serializer=model__pb2.ModelInfo.SerializeToString,
                response_deserializer=model__pb2.ModelOperationResponse.FromString,
                _registered_method=True)
        self.DownloadModel = channel.unary_unary(
                '/model_manager.ModelManager/DownloadModel',
                request_serializer=model__pb2.ModelOperationRequest.SerializeToString,
                response_deserializer=model__pb2.ModelOperationResponse.FromString,
                _registered_method=True)
        self.MoveModel = channel.unary_unary(
                '/model_manager.ModelManager/MoveModel',
                request_serializer=model__pb2.ModelOperationRequest.SerializeToString,
                response_deserializer=model__pb2.ModelOperationResponse.FromString,
                _registered_method=True)
        self.ServeModel = channel.unary_unary(
                '/model_manager.ModelManager/ServeModel',
                request_serializer=model__pb2.ModelOperationRequest.SerializeToString,
                response_deserializer=model__pb2.ModelOperationResponse.FromString,
                _registered_method=True)
        self.StopServing = channel.unary_unary(
                '/model_manager.ModelManager/StopServing',
                request_serializer=model__pb2.ModelOperationRequest.SerializeToString,
                response_deserializer=model__pb2.ModelOperationResponse.FromString,
                _registered_method=True)
        self.DeleteModel = channel.unary_unary(
                '/model_manager.ModelManager/DeleteModel',
                request_serializer=model__pb2.ModelOperationRequest.SerializeToString,
                response_deserializer=model__pb2.ModelOperationResponse.FromString,
                _registered_method=True)
        self.UpdateModelStatus = channel.unary_unary(
                '/model_manager.ModelManager/UpdateModelStatus',
                request_serializer=model__pb2.ModelStatusUpdate.SerializeToString,
                response_deserializer=model__pb2.Empty.FromString,
                _registered_method=True)
        self.StreamModelUpdates = channel.stream_unary(
                '/model_manager.ModelManager/StreamModelUpdates',
                request_serializer=model__pb2.ModelStatusUpdate.SerializeToString,
                response_deserializer=model__pb2.Empty.FromString,
                _registered_method=True)
        self.CreateJob = channel.unary_unary(
                '/model_manager.ModelManager/CreateJob',
                request_serializer=model__pb2.JobDefinition.SerializeToString,
                response_deserializer=model__pb2.ModelOperationResponse.FromString,
                _registered_method=True)
        self.GetJobStatus = channel.unary_unary(
                '/model_manager.ModelManager/GetJobStatus',
                request_serializer=model__pb2.JobDefinition.SerializeToString,
                response_deserializer=model__pb2.JobStatusResponse.FromString,
                _registered_method=True)
        self.CancelJob = channel.unary_unary(
                '/model_manager.ModelManager/CancelJob',
                request_serializer=model__pb2.JobDefinition.SerializeToString,
                response_deserializer=model__pb2.ModelOperationResponse.FromString,
                _registered_method=True)
        self.GetSystemStatus = channel.unary_unary(
                '/model_manager.ModelManager/GetSystemStatus',
                request_serializer=model__pb2.Empty.SerializeToString,
                response_deserializer=model__pb2.SystemStatus.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/model_manager.ModelManager/HealthCheck',
                request_serializer=model__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=model__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class ModelManagerServicer(object):
    """Service definition
    """

    def Connect(self, request, context):
        """Node management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disconnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterModel(self, request, context):
        """Model registry management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadModel(self, request, context):
        """Model operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MoveModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServeModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopServing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateModelStatus(self, request, context):
        """Status updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamModelUpdates(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateJob(self, request, context):
        """Job management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSystemStatus(self, request, context):
        """System status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=model__pb2.NodeRegistration.FromString,
                    response_serializer=model__pb2.ConnectResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=model__pb2.Empty.FromString,
                    response_serializer=model__pb2.Empty.SerializeToString,
            ),
            'Disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.Disconnect,
                    request_deserializer=model__pb2.Empty.FromString,
                    response_serializer=model__pb2.Empty.SerializeToString,
            ),
            'RegisterModel': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterModel,
                    request_deserializer=model__pb2.ModelInfo.FromString,
                    response_serializer=model__pb2.ModelOperationResponse.SerializeToString,
            ),
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=model__pb2.Empty.FromString,
                    response_serializer=model__pb2.ModelList.SerializeToString,
            ),
            'GetModelInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelInfo,
                    request_deserializer=model__pb2.ModelInfo.FromString,
                    response_serializer=model__pb2.ModelInfo.SerializeToString,
            ),
            'UnregisterModel': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterModel,
                    request_deserializer=model__pb2.ModelInfo.FromString,
                    response_serializer=model__pb2.ModelOperationResponse.SerializeToString,
            ),
            'DownloadModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadModel,
                    request_deserializer=model__pb2.ModelOperationRequest.FromString,
                    response_serializer=model__pb2.ModelOperationResponse.SerializeToString,
            ),
            'MoveModel': grpc.unary_unary_rpc_method_handler(
                    servicer.MoveModel,
                    request_deserializer=model__pb2.ModelOperationRequest.FromString,
                    response_serializer=model__pb2.ModelOperationResponse.SerializeToString,
            ),
            'ServeModel': grpc.unary_unary_rpc_method_handler(
                    servicer.ServeModel,
                    request_deserializer=model__pb2.ModelOperationRequest.FromString,
                    response_serializer=model__pb2.ModelOperationResponse.SerializeToString,
            ),
            'StopServing': grpc.unary_unary_rpc_method_handler(
                    servicer.StopServing,
                    request_deserializer=model__pb2.ModelOperationRequest.FromString,
                    response_serializer=model__pb2.ModelOperationResponse.SerializeToString,
            ),
            'DeleteModel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteModel,
                    request_deserializer=model__pb2.ModelOperationRequest.FromString,
                    response_serializer=model__pb2.ModelOperationResponse.SerializeToString,
            ),
            'UpdateModelStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateModelStatus,
                    request_deserializer=model__pb2.ModelStatusUpdate.FromString,
                    response_serializer=model__pb2.Empty.SerializeToString,
            ),
            'StreamModelUpdates': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamModelUpdates,
                    request_deserializer=model__pb2.ModelStatusUpdate.FromString,
                    response_serializer=model__pb2.Empty.SerializeToString,
            ),
            'CreateJob': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateJob,
                    request_deserializer=model__pb2.JobDefinition.FromString,
                    response_serializer=model__pb2.ModelOperationResponse.SerializeToString,
            ),
            'GetJobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJobStatus,
                    request_deserializer=model__pb2.JobDefinition.FromString,
                    response_serializer=model__pb2.JobStatusResponse.SerializeToString,
            ),
            'CancelJob': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelJob,
                    request_deserializer=model__pb2.JobDefinition.FromString,
                    response_serializer=model__pb2.ModelOperationResponse.SerializeToString,
            ),
            'GetSystemStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemStatus,
                    request_deserializer=model__pb2.Empty.FromString,
                    response_serializer=model__pb2.SystemStatus.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=model__pb2.HealthCheckRequest.FromString,
                    response_serializer=model__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'model_manager.ModelManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('model_manager.ModelManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ModelManager(object):
    """Service definition
    """

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/Connect',
            model__pb2.NodeRegistration.SerializeToString,
            model__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/Heartbeat',
            model__pb2.Empty.SerializeToString,
            model__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/Disconnect',
            model__pb2.Empty.SerializeToString,
            model__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/RegisterModel',
            model__pb2.ModelInfo.SerializeToString,
            model__pb2.ModelOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/ListModels',
            model__pb2.Empty.SerializeToString,
            model__pb2.ModelList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModelInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/GetModelInfo',
            model__pb2.ModelInfo.SerializeToString,
            model__pb2.ModelInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnregisterModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/UnregisterModel',
            model__pb2.ModelInfo.SerializeToString,
            model__pb2.ModelOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/DownloadModel',
            model__pb2.ModelOperationRequest.SerializeToString,
            model__pb2.ModelOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MoveModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/MoveModel',
            model__pb2.ModelOperationRequest.SerializeToString,
            model__pb2.ModelOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ServeModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/ServeModel',
            model__pb2.ModelOperationRequest.SerializeToString,
            model__pb2.ModelOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopServing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/StopServing',
            model__pb2.ModelOperationRequest.SerializeToString,
            model__pb2.ModelOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/DeleteModel',
            model__pb2.ModelOperationRequest.SerializeToString,
            model__pb2.ModelOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateModelStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/UpdateModelStatus',
            model__pb2.ModelStatusUpdate.SerializeToString,
            model__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamModelUpdates(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/model_manager.ModelManager/StreamModelUpdates',
            model__pb2.ModelStatusUpdate.SerializeToString,
            model__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/CreateJob',
            model__pb2.JobDefinition.SerializeToString,
            model__pb2.ModelOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetJobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/GetJobStatus',
            model__pb2.JobDefinition.SerializeToString,
            model__pb2.JobStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/CancelJob',
            model__pb2.JobDefinition.SerializeToString,
            model__pb2.ModelOperationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSystemStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/GetSystemStatus',
            model__pb2.Empty.SerializeToString,
            model__pb2.SystemStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/model_manager.ModelManager/HealthCheck',
            model__pb2.HealthCheckRequest.SerializeToString,
            model__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
