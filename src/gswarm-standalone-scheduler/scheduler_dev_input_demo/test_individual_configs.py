#!/usr/bin/env python3
"""
Test script for individual ComfyUI config files

This script tests multiple individual config files generated by comfyui_batch_converter.py
to ensure they work correctly with model_seq_gen.py.
"""

import subprocess
import sys
import json
from pathlib import Path
from typing import List, Dict, Any


def test_individual_configs(config_dir: str = "individual_configs", max_configs: int = 5) -> Dict[str, Any]:
    """Test individual config files to ensure they work with model_seq_gen.py."""
    config_path = Path(config_dir)
    
    if not config_path.exists():
        print(f"❌ Config directory does not exist: {config_dir}")
        return {"success": False, "error": "Directory not found"}
    
    # Get all config files
    config_files = list(config_path.glob("*.json"))
    
    if not config_files:
        print(f"❌ No config files found in {config_dir}")
        return {"success": False, "error": "No config files found"}
    
    print(f"🔍 Found {len(config_files)} config files")
    
    # Test a subset of configs
    test_files = config_files[:max_configs]
    print(f"🧪 Testing {len(test_files)} config files...")
    
    results = []
    
    for i, config_file in enumerate(test_files, 1):
        print(f"\n📄 [{i}/{len(test_files)}] Testing: {config_file.name}")
        
        # Test with model_seq_gen.py
        cmd = [
            "uv", "run", "model_seq_gen.py",
            "--config", str(config_file),
            "--num-requests", "2",
            "--output-prefix", f"test_individual_{i}",
            "--seed", "42"
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=".")
            
            if result.returncode == 0:
                print("✅ Success!")
                
                # Parse output for statistics
                output_lines = result.stdout.strip().split('\n')
                total_requests = 0
                workflows = 0
                
                for line in output_lines:
                    if "Total requests generated:" in line:
                        total_requests = int(line.split(":")[1].strip())
                    elif ":" in line and "requests (" in line:
                        workflows += 1
                
                results.append({
                    "config": config_file.name,
                    "success": True,
                    "requests": total_requests,
                    "workflows": workflows
                })
                
            else:
                print(f"❌ Failed!")
                print(f"Error: {result.stderr}")
                results.append({
                    "config": config_file.name,
                    "success": False,
                    "error": result.stderr
                })
                
        except Exception as e:
            print(f"❌ Exception: {str(e)}")
            results.append({
                "config": config_file.name,
                "success": False,
                "error": str(e)
            })
    
    # Summary
    successful = sum(1 for r in results if r["success"])
    failed = len(results) - successful
    
    print(f"\n{'='*60}")
    print("📊 Individual Config Test Summary")
    print(f"{'='*60}")
    print(f"📄 Configs Tested: {len(results)}")
    print(f"✅ Successful: {successful}")
    print(f"❌ Failed: {failed}")
    
    if successful > 0:
        print(f"\n✅ Successful Configs:")
        for result in results:
            if result["success"]:
                print(f"  • {result['config']}: {result['requests']} requests, {result['workflows']} workflows")
    
    if failed > 0:
        print(f"\n❌ Failed Configs:")
        for result in results:
            if not result["success"]:
                print(f"  • {result['config']}: {result.get('error', 'Unknown error')}")
    
    return {
        "success": failed == 0,
        "total_tested": len(results),
        "successful": successful,
        "failed": failed,
        "results": results
    }


def main():
    print("🧪 Individual ComfyUI Config Test Suite")
    print("="*50)
    
    # Test individual configs
    test_result = test_individual_configs()
    
    if test_result["success"]:
        print(f"\n🎉 All {test_result['successful']} config files passed!")
        return 0
    else:
        print(f"\n💥 {test_result['failed']} out of {test_result['total_tested']} configs failed!")
        return 1


if __name__ == "__main__":
    exit(main())
